#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
AXIOM_PATH="$(dirname "$SCRIPT_DIR")" # Assumes axiom-account is in interact/
source "$AXIOM_PATH/interact/includes/vars.sh"

BASEOS="$(uname)"
case $BASEOS in
'Linux')
    BASEOS='Linux'
    ;;
'FreeBSD')
    BASEOS='FreeBSD'
    alias ls='ls -G'
    ;;
'WindowsNT')
    BASEOS='Windows'
    ;;
'Darwin')
    BASEOS='Mac'
    ;;
'SunOS')
    BASEOS='Solaris'
    ;;
'AIX') ;;
*) ;;
esac

accounts=$(ls -A1 "$AXIOM_PATH/accounts/" | grep '\.json$' | sed 's/\.json//g')
if [ -f ~/.axiom/axiom.json ] ; then
	current=$(readlink -f "$AXIOM_PATH/axiom.json" | rev | cut -d / -f 1 | rev | cut -d . -f 1)> /dev/null 2>&1
fi

function bootstrap() {
    account_helpers=$(find "$AXIOM_PATH/interact/account-helpers" -name '*.sh' ! -name 'generate*' -execdir basename -s '.sh' {} +)
    account_str=$(echo "$account_helpers" | sed 's/ /, /g')
    provider_path="$AXIOM_PATH/interact/account-helpers/$provider.sh"
    bash "$provider_path"
}

if [ ! -z "$1" ]
then
    path="$AXIOM_PATH/accounts/$1.json"
    if [[ -f "$path" ]]
    then
        echo -e "${BWhite}Selecting $1...${Color_Off}"
        rm "$AXIOM_PATH/axiom.json" > /dev/null 2>&1
        ln -s "$AXIOM_PATH/accounts/$1.json" "$AXIOM_PATH/axiom.json"
        provider="$(cat "$AXIOM_PATH/axiom.json" | jq -r '.provider')"
        "$AXIOM_PATH"/interact/axiom-provider "$provider"

installed_packer_version=$(packer version 2>/dev/null | cut -d ' ' -f 2 | cut -d v -f2-)
if [[ "$(printf '%s\n' "$installed_packer_version" "$PackerVersion" | sort -V | head -n 1)" != "$PackerVersion" ]]; then
  echo -e "${Yellow}Packer is either not installed or version is lower than the recommended version in ~/.axiom/interact/includes/vars.sh${Color_Off}"
  echo "Installing/updating Packer version to version $PackerVersion..."
  if [[ $BASEOS == "Mac" ]]; then
    brew tap hashicorp/tap
    brew install hashicorp/tap/packer
    brew upgrade hashicorp/tap/packer
  else
    curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
    sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main" -y
    sudo apt-get update && sudo apt-get install packer -y

    # Check if the apt install failed or the version is still incorrect
    installed_packer_version=$(packer version 2>/dev/null | cut -d ' ' -f 2 | cut -d v -f2-)
    if [[ "$(printf '%s\n' "$installed_packer_version" "$PackerVersion" | sort -V | head -n 1)" != "$PackerVersion" ]]; then
      echo -e "${Yellow}Failed to install Packer via package manager or verion version is still lower than the recommended version in ~/.axiom/interact/includes/vars.sh${Color_Off}"
      echo -e "${Green}Downloading Packer binary instead, version $PackerVersion${Color_Off}"
      # Backup to installing Packer binary
      wget -q https://releases.hashicorp.com/packer/${PackerVersion}/packer_${PackerVersion}_linux_amd64.zip -P /tmp
      unzip -o /tmp/packer_${PackerVersion}_linux_amd64.zip -d /tmp
      sudo mv /tmp/packer /usr/bin/
      rm /tmp/packer_${PackerVersion}_linux_amd64.zip
    fi
  fi
fi

# check installed version of doclt and update if needed. check for valid token. If token isnt valid, kick off account bootstrap
#



# check installed version of azure cli and update if needed. check for valid token. If token isnt valid, kick off account bootstrap
#
if [[ "$provider" == "azure" ]]; then
   # Set the required Azure CLI version
   installed_version=$(az version  2>/dev/null| jq -r '."azure-cli"')
   if [[ "$(printf '%s\n' "$installed_version" "$AzureCliVersion" | sort -V | head -n 1)" != "$AzureCliVersion" ]]; then

        # Handle macOS installation/update
        if [[ $BASEOS == "Mac" ]]; then
            whereis brew
            if [ ! $? -eq 0 ] || [[ ! -z ${AXIOM_FORCEBREW+x} ]]; then
                echo -e "${BGreen}Installing Homebrew...${Color_Off}"
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            else
                echo -e "${BGreen}Checking for Homebrew... already installed.${Color_Off}"
            fi
            if ! [ -x "$(command -v az)" ]; then
                echo -e "${BGreen}Installing Azure CLI (az)...${Color_Off}"
                brew update && brew install azure-cli
            else
                echo -e "${BGreen}Updating Azure CLI (az)...${Color_Off}"
                brew update && brew upgrade azure-cli
            fi

        # Handle Linux installation/update
        elif [[ $BASEOS == "Linux" ]]; then
            sudo apt-get update -qq
            sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg -y -qq

            if uname -a | grep -qi "Microsoft"; then
                OS="UbuntuWSL"
            else
                OS=$(lsb_release -i 2>/dev/null | awk '{ print $3 }')
                if ! command -v lsb_release &> /dev/null; then
                    OS="unknown-Linux"
                    BASEOS="Linux"
                fi
            fi

            AZ_REPO=$(lsb_release -cs)
            if [[ $AZ_REPO == "kali-rolling" ]]; then
                check_version=$(cat /proc/version | awk '{ print $6 $7 }' | tr -d '()' | cut -d . -f 1)
                case $check_version in
                    Debian10)
                        AZ_REPO="buster"
                        ;;
                    Debian11)
                        AZ_REPO="bullseye"
                        ;;
                    Debian12)
                        AZ_REPO="bookworm"
                        ;;
                    *)
                        echo "Unknown Debian version. Exiting."
                        exit 1
                        ;;
                esac
            fi
            curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
            echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list

            sudo apt-get update -qq
            sudo apt-get purge azure-cli -y -qq
            sudo apt-get install azure-cli -y -qq

        elif [[ $OS == "Fedora" ]]; then
            echo "Needs Conversation for Fedora"
        fi
  fi 
 # Authenticate using client credentials stored in axiom.json
    echo -e "${BGreen}Installing Azure packer plugin...${Color_Off}"
    packer plugins install github.com/hashicorp/azure

    client_id="$(jq -r '.client_id' "$AXIOM_PATH"/axiom.json)"
    client_secret="$(jq -r '.client_secret' "$AXIOM_PATH"/axiom.json)"
    tenant_id="$(jq -r '.tenant_id' "$AXIOM_PATH"/axiom.json)"
    subscription_id="$(jq -r '.subscription_id' "$AXIOM_PATH"/axiom.json)"
    use_azure_cli_auth="$(jq -r '.use_azure_cli_auth' "$AXIOM_PATH"/axiom.json)"

    if [[ "$use_azure_cli_auth" == "true" ]]; then
        echo -e "${BGreen}Authenticating with Azure using Azure CLI...${Color_Off}"

        az login --service-principal --username "$client_id" --password "$client_secret" --tenant "$tenant_id" || bootstrap
        az account set --subscription "$subscription_id"
        sleep 3
        # Check if the correct subscription is set and accessible
        az account show &> /dev/null
        if [[ $? -ne 0 ]]; then
            echo -e "${BRed}Not authenticated to Azure CLI. Running bootstrap...${Color_Off}"
            bootstrap
        else
            echo -e "${BGreen}Azure CLI is authenticated.${Color_Off}"
        fi
    else
        echo -e "${BRed}Azure CLI authentication disabled in axiom.json${Color_Off}"
        bootstrap
    fi
fi # provider azure

# check installed version of aws cli and update if needed. check for valid token. If token isnt valid, kick off account bootstrap
#
if [[ "$provider" == "aws" ]]; then
   installed_version=$(aws --version  2>/dev/null | cut -d ' ' -f 1 | cut -d '/' -f 2)
   if [[ "$(printf '%s\n' "$installed_version" "$AWSCliVersion" | sort -V | head -n 1)" != "$AWSCliVersion" ]]; then
        # Determine the OS type and handle installation accordingly
        if [[ $BASEOS == "Mac" ]]; then
            echo -e "${BGreen}Installing/Updating AWS CLI on macOS...${Color_Off}"
            curl "https://awscli.amazonaws.com/AWSCLIV2.pkg" -o "AWSCLIV2.pkg"
            sudo installer -pkg AWSCLIV2.pkg -target /
            rm AWSCLIV2.pkg

        elif [[ $BASEOS == "Linux" ]]; then
            if uname -a | grep -qi "Microsoft"; then
                OS="UbuntuWSL"
            else
                OS=$(lsb_release -i 2>/dev/null | awk '{ print $3 }')
                if ! command -v lsb_release &> /dev/null; then
                    OS="unknown-Linux"
                    BASEOS="Linux"
                fi
            fi

            # Install AWS CLI based on specific Linux distribution
            if [[ $OS == "Ubuntu" ]] || [[ $OS == "Debian" ]] || [[ $OS == "Linuxmint" ]] || [[ $OS == "Parrot" ]] || [[ $OS == "Kali" ]] || [[ $OS == "unknown-Linux" ]] || [[ $OS == "UbuntuWSL" ]]; then
                echo -e "${BGreen}Installing/Updating AWS CLI on $OS...${Color_Off}"
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
                cd /tmp
                unzip awscliv2.zip
                sudo ./aws/install
                rm -rf /tmp/aws
                rm /tmp/awscliv2.zip
            elif [[ $OS == "Fedora" ]]; then
                echo -e "${BGreen}Installing/Updating AWS CLI on Fedora...${Color_Off}"
                sudo dnf install -y unzip
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
                cd /tmp
                unzip awscliv2.zip
                sudo ./aws/install
                rm -rf /tmp/aws
                rm /tmp/awscliv2.zip
            else
                echo -e "${BRed}Unsupported Linux distribution: $OS${Color_Off}"
            fi
        fi

   fi

    echo -e "${BGreen}Installing AWS packer plugin...${Color_Off}"
    packer plugins install github.com/hashicorp/amazon

    # Use credentials from axiom.json if available
    aws_access_key="$(jq -r '.aws_access_key' "$AXIOM_PATH"/axiom.json)"
    aws_secret_access_key="$(jq -r '.aws_secret_access_key' "$AXIOM_PATH"/axiom.json)"
    aws_region="$(jq -r '.region' "$AXIOM_PATH"/axiom.json)"

    if [[ -n "$aws_access_key" && -n "$aws_secret_access_key" ]]; then
        echo -e "${BGreen}Configuring AWS CLI with credentials from axiom.json...${Color_Off}"
        # Get AWS profile option from axiom.json
        aws_profile=$(jq -r '.aws_profile // empty' "$AXIOM_PATH/axiom.json" 2>/dev/null)
        if [[ -n "$aws_profile" && "$aws_profile" != "null" ]]; then
            aws configure set aws_access_key_id "$aws_access_key" --profile "$aws_profile"
            aws configure set aws_secret_access_key "$aws_secret_access_key" --profile "$aws_profile"
            aws configure set region "$aws_region" --profile "$aws_profile"
        else
            aws configure set aws_access_key_id "$aws_access_key"
            aws configure set aws_secret_access_key "$aws_secret_access_key"
            aws configure set region "$aws_region"
        fi
    else
        echo -e "${BRed}No AWS credentials found in axiom.json. Please set them manually.${Color_Off}"
        bootstrap
    fi

    # Check if AWS CLI is authenticated
    aws_profile=$(jq -r '.aws_profile // empty' "$AXIOM_PATH/axiom.json" 2>/dev/null)
    if [[ -n "$aws_profile" && "$aws_profile" != "null" ]]; then
        if ! aws sts get-caller-identity --profile "$aws_profile" &> /dev/null; then
            echo -e "${BRed}AWS CLI is not authenticated.${Color_Off} Running bootstrap..."
            bootstrap
        else
            echo -e "${BGreen}AWS CLI is authenticated.${Color_Off}"
        fi
    else
        if ! aws sts get-caller-identity &> /dev/null; then
            echo -e "${BRed}AWS CLI is not authenticated.${Color_Off} Running bootstrap..."
            bootstrap
        else
            echo -e "${BGreen}AWS CLI is authenticated.${Color_Off}"
        fi
    fi

fi # provider aws

# check installed version of gcloud cli and update if needed.
if [[ "$provider" == "gcp" ]]; then
    echo -e "${Green}Checking gcloud version...${Color_Off}"

    # Get the currently installed version of gcloud
    installed_version=$(gcloud version 2>/dev/null | grep 'Google Cloud SDK' | cut -d ' ' -f 4)

    # Compare installed version with desired version (set in vars.sh)
    if [[ "$(printf '%s\n' "$installed_version" "$GCloudCliVersion" | sort -V | head -n 1)" != "$GCloudCliVersion" ]]; then
        echo "Installed version of gcloud is lower than required GCloudCliVersion in $AXIOM_PATH/interact/includes/vars.sh"

        # Install or update gcloud based on the OS
        if [[ $BASEOS == "Mac" ]]; then
            echo -e "${BGreen}Installing/Updating gcloud CLI on macOS...${Color_Off}"
            curl https://sdk.cloud.google.com | bash
            exec -l $SHELL
        elif [[ $BASEOS == "Linux" ]]; then
            if uname -a | grep -qi "Microsoft"; then
                OS="UbuntuWSL"
            else
                OS=$(lsb_release -i 2>/dev/null | awk '{ print $3 }')
                if ! command -v lsb_release &> /dev/null; then
                    OS="unknown-Linux"
                    BASEOS="Linux"
                fi
            fi

            echo -e "${BGreen}Installing/Updating gcloud CLI on Linux...${Color_Off}"
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            sudo apt-get install apt-transport-https ca-certificates gnupg -y -qq
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /usr/share/keyrings/cloud.google.gpg > /dev/null
            sudo apt-get update -qq && sudo apt-get install google-cloud-sdk -y -qq
        fi
    fi

    echo -e "${BGreen}Installing GCP packer plugin...${Color_Off}"
    packer plugins install github.com/hashicorp/googlecompute

    # Check if gcloud is authenticated (via ADC)
    if ! gcloud auth list --filter=status:ACTIVE &> /dev/null; then
        echo -e "${BRed}gcloud is not authenticated. Please run 'gcloud auth application-default login' and 'gcloud auth login' to authenticate.${Color_Off}"
    else
        echo -e "${BGreen}gcloud is authenticated.${Color_Off}"
    fi
fi # provider gcp





echo -e "${Green}Selected $1 successfully${Color_Off}"
else
        echo -e "${Red}Account name not present${Color_Off}"
    fi
else
    echo -e "${BWhite}Available Accounts${Color_Off}"
    echo -n -e "${BGreen}"
    for account in $accounts
        do
            if [[ $account == $current ]]
            then
                echo "* $account"
            else
                echo "  $account"
            fi
        done
    echo -n -e "${Color_Off}"
fi
