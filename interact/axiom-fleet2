#!/usr/bin/env bash

###########################################################################################################
# Header
#
AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"
BASEOS="$(uname)"
case $BASEOS in
    'Darwin')
        PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
        ;;
    *) ;;
esac

###########################################################################################################
# Declare defaut variables
#
region_array=()
gen_name=""
amount=false
provider="$(jq -r ".provider" "$AXIOM_PATH"/axiom.json)"
image="$(jq -r '.imageid' "$AXIOM_PATH"/axiom.json)"
regions="$(jq -r '.region' "$AXIOM_PATH"/axiom.json)"
sshkey="$(jq -r '.sshkey' "$AXIOM_PATH"/axiom.json)"
default_size="$(jq -r '.default_size' "$AXIOM_PATH"/axiom.json)"
disk="$(jq -r '.default_disk_size' "$AXIOM_PATH"/axiom.json)"
image_id=""
manual_image_id=false
timeout_sleep=4
user_region=false
legacy_spinup=false

###########################################################################################################
# Start a countdown timer in a background process
#
timer(){
(
    secs=$timeout  # Dynamic timeout based on the number of instances
    while [ $secs -gt 0 ]; do
        echo -ne "${BWhite}>> T-Minus $secs to full initialization...${Color_Off}\r"
        sleep 1
        : $((secs--))
    done
    if [[ "$legacy_spinup" == "false" ]]; then
        echo -e "\n${BRed}Timeout reached. Some instances may not be ready.${Color_Off}"
        kill "$create_instances_pids" 2>/dev/null  # Kill the ongoing processes if timeout reached
    fi
) &
}

###########################################################################################################
# Help Menu
#
function usage() {
    echo -e "${BWhite}Usage:${Color_Off} axiom-fleet2 [OPTIONS] [<fleet prefix>]"
    echo
    echo -e "${BWhite}Description:${Color_Off}"
    echo -e "  Spin up fleets of Axiom instances in parallel across one or more regions."
    echo -e "  Specify a custom fleet prefix, or let Axiom generate one randomly."
    echo
    echo -e "${BWhite}Options:${Color_Off}"
    echo -e "  <fleet prefix>           Optional name for fleet prefix (e.g. ctbb, jerry)"
    echo -e "  -i, --instances <int>    Number of instances to create (required)"
    echo -e "  -r, --regions <list>     Comma-separated list of regions (optional)"
    echo -e "  -l, --legacy             Launch instances one at a time (slower, for debugging)"
    echo -e "  --image <name>           Specify image to use (default from axiom.json)"
    echo -e "  --debug                  Enable debug output (very verbose)"
    echo -e "  --help                   Show this help menu"
    echo
    echo -e "${BWhite}Examples:${Color_Off}"
    echo -e "  ${BGreen}axiom-fleet2 ctbb${Color_Off}                                  # Create 3 instances: ctbb01, ctbb02, ctbb03"
    echo -e "  ${BGreen}axiom-fleet2 -i 10${Color_Off}                                 # Create 10 instances with random prefix"
    echo -e "  ${BGreen}axiom-fleet2 jerry -i 25 --regions dal13,lon06,fra05${Color_Off} # Use round-robin region distribution"
    echo
}

###########################################################################################################
# Parse command line arguments
#
if [ $# -eq 0 ]; then
    usage
    exit 0
fi
i=0
for arg in "$@"
do
    if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]] ; then
        usage
        exit
    fi
    i=$((i+1))
    if [[  ! " ${pass[@]} " =~ " ${i} " ]]; then
        set=false
        if [[ "$arg" == "--debug" ]]; then
            set -xv
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "-i" ]] || [[ "$arg" == "--instances" ]]; then
            n=$((i+1))
            amount=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--regions" ]] || [[ "$arg" == "-r" ]]; then
            n=$((i+1))
            regions=$(echo ${!n})
            user_region=true
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--legacy" ]] || [[ "$arg" == "-l" ]]; then
            legacy_spinup=true
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--image" ]] ; then
            n=$((i+1))
            image=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--image-id" ]]; then
            n=$((i+1))
            manual_image_id=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if  [[ "$set" != "true" ]]; then
            space=" "
            if [[ $arg =~ $space ]]; then
                args="$args \"$arg\""
            else
                args="$args $arg"
            fi
        fi
    fi

done

###########################################################################################################
# Change timeout_sleep depending on Cloud provider
#

###########################################################################################################
# If -i /--instances isnt used, default to three instances
#
if [[ "$amount" == "false" ]]; then
    amount=3
fi

###########################################################################################################
# Generate name
#
if [ -z ${args+x} ]; then
    gen_name="${names[$RANDOM % ${#names[@]} ]}"
else
    gen_name=$(echo "$args" | tr -d ' ')
fi

###########################################################################################################
# Get image_id from $image ( default is from axiom.json ) or from user supplied manual image id param
#
if [ "$manual_image_id" != "false" ]
then
    image_id="$manual_image_id"
else
    image_id="$(get_image_id "$image")"
    if [ -z "$image_id" ]; then
        echo -e "${BRed}ERROR: imageid ${Color_Off}[ ${BBlue}$image ${Color_Off}]${BRed} not found in ${Color_Off}[ ${BBlue}~/.axiom/axiom.json ${Color_Off}]${BRed}. you may need to run ${Color_Off}[ ${BBlue}axiom-build --setup ${Color_Off}]${BRed} to build a new image."
        echo -e "${BRed}if you've already built an image, list all images with ${Color_Off}[ ${BBlue}axiom-images ls ${Color_Off}]${BRed} and select it with ${Color_Off}[ ${BBlue}axiom-images select axiom-\$provisioner-\$timestamp ${Color_Off}]"
        echo -e "${BRed}exiting...${Color_Off}"
        exit 1
    fi
fi

###########################################################################################################
# Check if ssh key is specified in axiom.json
#
if [ "$sshkey" == "" ] || [ "$sshkey" == "null" ]; then
    echo -e  "${BYellow}WARNING: sshkey not found in ${Color_Off}[ ${BBlue}~/.axiom/axiom.json ${Color_Off}]${BYellow}. adding ${Color_Off}[ ${BBlue}axiom_rsa ${Color_Off}] ${BYellow}key as a backup."
    account_path=$(ls -la "$AXIOM_PATH"/axiom.json | rev | cut -d " " -f 1 | rev)
    sshkey=axiom_rsa
    if [ -f ~/.ssh/axiom_rsa ] ; then
        jq '.sshkey="axiom_rsa"' <"$account_path">"$AXIOM_PATH"/tmp.json ; mv "$AXIOM_PATH"/tmp.json "$account_path"
    else
        ssh-keygen -b 2048 -t rsa -f ~/.ssh/axiom_rsa -q -N ""
        jq '.sshkey="axiom_rsa"' <"$account_path">"$AXIOM_PATH"/tmp.json ; mv "$AXIOM_PATH"/tmp.json "$account_path"  >> /dev/null 2>&1
    fi
fi

###########################################################################################################
# Create cloud-init user-data to inject ssh pub key
#
if [ -f ~/.ssh/$sshkey.pub ] ; then
    public_key_content=$(cat "$HOME/.ssh/$sshkey.pub")
    user_data=$(cat <<EOF
#cloud-config
users:
  - default
  - name: op
    ssh-authorized-keys:
      - $public_key_content
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    shell: /bin/bash
EOF
)
fi

###########################################################################################################
# Determine starting index to avoid duplicate names
#
total=$(query_instances "$gen_name*" | tr " " "\n" | sed -n 's/.*[^0-9]\([0-9]*\)$/\1/p' | sort -nr | head -n1)
total="${total#0}"  # Remove leading zeros
start=$((total + 1))  # Start from the next available index
end=$((start + amount - 1))  # Determine the last index
names=()

# Generate unique instance names
for i in $(seq -f "%02g" $start $end); do
    names+=("${gen_name}${i}")
done

# Function to handle cleanup on Ctrl+C
cleanup() {
    for pid in "${create_instances_pids[@]}"; do
        kill "$pid" >/dev/null 2>&1
    done

    # Kill the timer process if it exists
    if [[ -n "$timer_pid" ]]; then
        kill "$timer_pid" >/dev/null 2>&1
        wait "$timer_pid" 2>/dev/null
    fi

    exit 1
}

trap cleanup SIGINT

###########################################################################################################
# Fleet Initialization
# Use region from axiom.json or parse the regions from user argument, separated by commas
#
IFS=',' read -r -a regions_array <<< "$regions"
formatted_regions=($(echo "${regions_array[@]}" | tr ' ' '\n' | tr '\n' ' '))

###########################################################################################################
# Chance to cancel axiom-fleet2
#
echo -e "${BWhite}Initializing new fleet '${BGreen}$gen_name${BWhite}' with '${BGreen}$amount${BWhite}' instances in regions '${BGreen}${formatted_regions[@]}${BWhite}' using image '${BGreen}$image${Color_Off}'...${Color_Off}"
echo -e "${BWhite}INITIALIZING IN 5 SECONDS, CTRL+C to quit... ${Color_Off}"
sleep 5


# Initialize variables
num_regions=${#formatted_regions[@]}
num_names=${#names[@]}

# Create temporary files to store instance names per region
temp_dir=$(mktemp -d)
for region in "${formatted_regions[@]}"; do
    touch "$temp_dir/$region"
done

# Distribute names evenly across regions
for ((i = 0; i < num_names; i++)); do
    region_index=$((i % num_regions))
    region=${formatted_regions[$region_index]}
    echo "${names[$i]}" >> "$temp_dir/$region"
done

if [[ "$legacy_spinup" == "false" ]]; then
    # Calculate dynamic timeout
    timeout=$((420 + (amount * timeout_sleep)))
    # Display instance names
    echo -n -e "${BWhite}Instances: ${Color_Off}[ "
        for name in "${names[@]}"; do
            echo -n -e "${BGreen}${name} ${Color_Off}"
        done
    echo -e "]"
    timer
    timer_pid=$!
else
    echo -n -e "${BWhite}Instances: ${Color_Off}[ ${BGreen}"
    # Calculate dynamic timeout
    timeout=$((320 + (amount * 3)))
fi

# Print the distribution and create instances
for region in "${formatted_regions[@]}"; do

    # Get the right image_id if AWS and user specified region is true
    if [[ "$provider" == "aws" ]] && [[ "$user_region" == true ]]; then
        image_id="$(get_image_id "$image" "$region")"
    fi

    # Read names for this region into an array
    region_names=()
    while IFS= read -r line; do
        region_names+=("$line")
    done < "$temp_dir/$region"

    # Only create instances if we have names for this region
    if [ ${#region_names[@]} -gt 0 ]; then

        if [[ "$legacy_spinup" == "false" ]]; then
            # Pass the arguments and names to create_instances function to create instances in parallel
            create_instances "$image_id" "$default_size" "$region" "$user_data" "$timeout" "$disk" "${region_names[@]}" &
            create_instances_pids+=($!)  # Store the PID of this process
        else
            # Use legacy spinup, create_instance function, to create one instance at a time (--legacy)
            for name in "${region_names[@]}"; do
                echo -n -e "${BGreen}$name ${Color_Off}"
                "$AXIOM_PATH"/interact/axiom-init "$name" --quiet --size "$default_size" --image-id "$image_id" --no-select --region "$region" --disk $disk  &
                create_instances_pids+=($!)  # Store the PID of this process
                sleep $timeout_sleep
            done
        fi
    fi
done

if [[ "$legacy_spinup" == "true" ]]; then
    echo -n -e "${Color_Off}]\n"
    timer
    timer_pid=$!
fi

# Clean up temp directory
rm -rf "$temp_dir"

# Wait for all create_instances processes to complete simultaneously
wait "${create_instances_pids[@]}"

# Kill the timer when `create_instances` finishes
kill "$timer_pid" >/dev/null 2>&1
wait "$timer_pid" 2>/dev/null || true  # Ignore errors from already terminated timer

# Select the instances
"$AXIOM_PATH"/interact/axiom-select "${names[@]}"
echo -e "${BGreen}Fleet started successfully. Use 'axiom-rm \"$gen_name*\" -f' to delete.${Color_Off}"
