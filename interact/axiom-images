#!/usr/bin/env bash

###################################################################
# Title	: axiom-images
# Author : 0xtavian
# Github : https://github.com/0xtavian
###################################################################

###################################################################
#  Header
#
AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"
begin=$(date +%s)
start="$(pwd)"
BASEOS="$(uname)"
account_path=$(ls -la $AXIOM_PATH/axiom.json | rev | cut -d " " -f 1 | rev)
accounts=$(ls -l "$AXIOM_PATH/accounts/" | grep "json" | grep -v 'total ' | awk '{ print $9 }' | sed 's/\.json//g')
current=$(ls -lh ~/.axiom/axiom.json | awk '{ print $11 }' | tr '/' '\n' | grep json | sed 's/\.json//g') > /dev/null 2>&1
provisioner="$(jq -r ".provisioner" "$AXIOM_PATH/axiom.json")"
provider="$(jq -r ".provider" "$AXIOM_PATH/axiom.json")"

###########################################################################################################
# Help Menu:
#
function usage() {
    echo -e "${BWhite}Usage:${Color_Off} axiom-images [COMMAND] [OPTIONS]"
    echo
    echo -e "${BWhite}Description:${Color_Off}"
    echo -e "  Manage images (snapshots) created from Axiom instances and Axiom build."
    echo -e "  Supports listing, creating, selecting, and deleting images used for axiom-init or axiom-fleet."
    echo
    echo -e "${BWhite}Commands:${Color_Off}"
    echo -e "  ls                         List all images on the current account"
    echo -e "  get                        Print current image settings from ~/.axiom/axiom.json"
    echo -e "  create [instance]          Create image from instance (or use wizard if instance is omitted)"
    echo -e "  select <image>             Set image as default for future axiom-init / axiom-fleet"
    echo -e "  rm <image>                 Delete specified image from the account"
    echo
    echo -e "${BWhite}Options:${Color_Off}"
    echo -e "  --debug                    Enable debug output (very verbose)"
    echo -e "  --help                     Show this help menu"
    echo
    echo -e "${BWhite}Examples:${Color_Off}"
    echo -e "  ${BGreen}axiom-images ls${Color_Off}                              # List all available images"
    echo -e "  ${BGreen}axiom-images get${Color_Off}                             # Show current image config"
    echo -e "  ${BGreen}axiom-images create${Color_Off}                          # Start interactive image creation wizard"
    echo -e "  ${BGreen}axiom-images create testy01${Color_Off}                  # Create image from instance 'testy01'"
    echo -e "  ${BGreen}axiom-images select axiom-default-1709878237${Color_Off} # Select image for future init/fleet"
    echo -e "  ${BGreen}axiom-images rm axiom-default-1709878237${Color_Off}     # Delete image by name"
    echo

}

###########################################################################################################
#  Declare defaut variables
#
list=false
help=true
rm=false
use=false
create_snapshot=false

###########################################################################################################
#  Parse command line arguments
#
if [[ "$@" == "--help" ]] || [[ "$@" == "-h" ]] || [[ "$@" == "" ]]; then
usage
exit
fi
i=0
for arg in "$@"
do
    i=$((i+1))
    if [[  ! " ${pass[@]} " =~ " ${i} " ]]; then
        set=false
       if [[ "$arg" == "--debug" ]]; then
            set -xv
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "rm" ]]; then
            n=$((i+1))
            rm=true
            snapshot=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "select" ]] ||[[ "$arg" == "set" ]] || [[ "$arg" == "use" ]] ; then
            n=$((i+1))
            use=true
            snapshot=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "ls" ]]; then
            list="true"
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]] || [[ "$arg" == "help" ]]; then
            usage
            exit
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "get" ]] ; then
            get="true"
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "create" ]] ; then
            n=$((i+1))
            create_snapshot="true"
            instance_name=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi 
        if  [[ "$set" != "true" ]]; then
            args="$args $arg"
        fi

    fi
done

# Get the image in /.axiom/accout/account.json
#
if [[ "$get" == "true" ]]; then
 echo -e "${Green}Displaying Account Info from: $current${Color_Off}"
 cat $(echo $account_path)
 exit 1
fi

# List Snapshots
#
if [[ "$list" == "true" ]]; then
 echo -e "${Green}Listing Available Snapshots in Account: $current${Color_Off}"
 get_snapshots
 exit 1
fi

# Delete Snapshot by its name
#
if [[ "$rm" == "true" ]]; then
 if [ -z ${snapshot:+x} ]; then
  echo -e "${Red}Snapshot name not supplied. To list all snapshots run axiom-images ls${Color_Off}"
  exit 1
 fi
 echo -e "${Green}Deleting Snapshot by name: $(echo $snapshot)${Color_Off}"
 delete_snapshot $snapshot || { echo -e "${Red}Failed to find snapshot with name: "$snapshot"... exiting${Color_Off}" ; exit 1; }
 echo -e "${Green}Successfully deleted snapshot!${Color_Off}"
fi

# Use Snapshot by name. Run axiom-init or axiom-fleet to use after updating
#
if [[ "$use" == "true" ]]; then

 # Check if snapshot is unset or emtpy
 if [ -z "${snapshot+x}" ] || [ -z "$snapshot" ]; then
  echo -e "${Red}No image provided, unable to select image.. exiting${Color_Off}"
  exit
 fi
 old="$(cat "$AXIOM_PATH/axiom.json" | jq -r '.imageid')"
 jq '.imageid="'$snapshot'"' <"$account_path">"$AXIOM_PATH"/tmp.json ; mv "$AXIOM_PATH"/tmp.json "$account_path"
 get_snapshots | grep $snapshot || { echo -e "${Red}Failed to find snapshot with name: "$snapshot"... exiting${Color_Off}" ; exit 1; }
 echo -e "${Green}Successfully updated imageid $old with new imageid in $snapshot in account: $current${Color_Off}"
 echo -e "${Green}Run axiom-init or axiom-fleet to use it!${Color_Off}"
fi

# Create a snapshot from an existing axiom instance to use for future axiom-fleet axiom-init
#
if [[ "$create_snapshot" == "true" ]]; then

 if [[ "$provider" == "azure" ]]; then

  echo -e -n "${Red}Error: at this moment we dont support taking snapshots with azure :/"
  echo -e -n "${Red}Open a issue showing the az cli commands needed to take a snapshot and we'll look into it!"
  echo -e -n "${Red}Exiting..."
  exit 1

 fi

 if [ -z "$instance_name" ]; then
  axiom-ls
  echo -e -n "${BGreen}Enter the instance name to make a snapshot/image and use that image for axiom-init/axiom-fleet \n>> ${Color_Off}"
  read instance_name
 fi

 if [ -z $(instance_ip $instance_name) ]; then
  echo -e "${BRed}could not find instance name ${Color_Off}[ ${BBlue}$instance_name ${Color_Off}]${BRed} on account, exiting.."
  echo -e "${BRed}did you enter a valid instance name from ${Color_Off}[ ${BBlue}axiom-ls ${Color_Off}]${BRed}?"
  exit
 fi
  new_image_name=axiom-"$instance_name"-$(date +%s)
  instance_ip
  echo -e "${BGreen}Creating new image/snapshot from ${Color_Off}[ ${BBlue}$instance_name ${Color_Off}]${BGreen}...${Color_Off}"
  create_snapshot "$instance_name" "$new_image_name"
  sleep 5


   else
    echo -e ""
    echo -e "${BGreen}If the command above was sucessful, the snapshot ${Color_Off}[ ${BBlue}$new_image_name ${Color_Off}] ${BGreen}should be in the process of being created..."
    echo -e "${BYellow}creating a snapshot takes some time and could be anywhere from 10 to 30 minutes depending on the size and regions${Color_Off}"
    echo -e "${BGreen}you can monitor the creation of the snapshot by logging into the cloud console${Color_Off}"
    echo -e "${BYellow}or you can use ${Color_Off}[ ${BBlue}axiom-images ls ${Color_Off}] ${BYellow}to print available images${Color_Off}"
    echo -e "${BGreen}...printing available images with ${Color_Off}[ ${BBlue}axiom-image ls ${Color_Off}] ${BGreen}now, but its unlikely the snapshot ${Color_Off}[ ${BBlue}$new_image_name ${Color_Off}] ${BGreen}is created yet.."
    sleep 5
    axiom-images ls
    echo -e ""
    echo -e "${BYellow}when the snapshot name ${Color_Off}[ ${BBlue}$new_image_name ${Color_Off}] ${BYellow}is available in ${Color_Off}[ ${BBlue}axiom-images ls ${Color_Off}] "
    echo -e "${BGreen}you will have to select the snapshot to use it for axiom-fleet/axiom-init ${Color_Off}[ ${BBlue}axiom-images select $new_image_name${Color_Off} ]"
    echo -e "${BYellow}please run ${Color_Off}[ ${BBlue}axiom-images ls ${Color_Off}]${BYellow} every few minutes until you see the snapshot name ${Color_Off}[ ${BBlue}$new_image_name${Color_Off}]"
    echo -e "${BGreen}once the snapshot is created, run ${Color_Off}[ ${BBlue}axiom-images select $new_image_name${Color_Off} ]${BGreen} to select it and use it for axiom-fleet/axiom-init!"
  fi
fi
