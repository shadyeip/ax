#!/usr/bin/env bash

###########################################################################################################
# Header
#
AXIOM_PATH="$HOME/.axiom"
source "$AXIOM_PATH/interact/includes/vars.sh"
source "$AXIOM_PATH/interact/includes/functions.sh"
source "$AXIOM_PATH/interact/includes/system-notification.sh"
starttime=$(date +"%F-TIME-%T")
start="$(pwd)"
BASEOS="$(uname)"
case $BASEOS in
'Darwin')
    PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
    ;;
*) ;;
esac

###########################################################################################################
# Declare defaut variables
#
provider="$(jq -r '.provider' "$AXIOM_PATH"/axiom.json)"
region="$(jq -r '.region' "$AXIOM_PATH"/axiom.json)"
size="$(jq -r '.default_size' "$AXIOM_PATH"/axiom.json)"
image="$(jq -r '.imageid' "$AXIOM_PATH"/axiom.json)"
sshkey="$(jq -r '.sshkey' "$AXIOM_PATH"/axiom.json)"
disk="$(jq -r '.default_disk_size' "$AXIOM_PATH"/axiom.json)"
box_name=""
connect_shell=false
deploy=false
expire=false
default_expiry=525600000
quiet=false
domain=false
no_select=false
manual_image_id=false

###########################################################################################################
# waitabit function
# TODO https://github.com/pry0cc/axiom/issues/175
#
waitabit() {
        local -r pid="${1}"
        local -r delay='0.38'
        i=420
        while ps a | awk '{print $1}' | grep -q "${pid}"; do
                : $((i--))
                sleep "$delay"
        done
        printf "    \b\b\b\b"
}


###########################################################################################################
# Help Menu
#
function usage() {
    echo -e "${BWhite}Usage:${Color_Off} axiom-init [OPTIONS] [<instance name>]"
    echo
    echo -e "${BWhite}Description:${Color_Off}"
    echo -e "  Initialize a single Axiom instance with optional image, region, size, and post-init deployment."
    echo
    echo -e "${BWhite}Instance Options:${Color_Off}"
    echo -e "  <name>                   Instance name (optional, random if omitted)"
    echo -e "  --image <name>           Use a specific image (default from axiom config)"
    echo -e "  --region <region>        Use a specific region (default from axiom config)"
    echo -e "  --size <size>            Set instance size (default from axiom config)"
    echo -e "  --disk <int>             Set instance default boot disk size (default from axiom config)"
    echo
    echo -e "${BWhite}Provisioning:${Color_Off}"
    echo -e "  --deploy <profile>       Deploy a profile after init (e.g. desktop, openvpn)"
    echo -e "  --shell                  Open a shell to the instance after init"
    echo
    echo -e "${BWhite}Behavior:${Color_Off}"
    echo -e "  --run                    Initialize an instance with a random name"
    echo -e "  --no-select              Do not auto-select instance after init"
    echo -e "  --debug                  Enable debug output (set -xv)"
    echo -e "  --help                   Show this help menu"
    echo
    echo -e "${BWhite}Examples:${Color_Off}"
    echo -e "  ${BGreen}axiom-init --run${Color_Off}                               # Create instance with random name"
    echo -e "  ${BGreen}axiom-init --deploy desktop${Color_Off}                    # Deploy 'desktop' profile after init"
    echo -e "  ${BGreen}axiom-init testy01${Color_Off}                             # Create instance named testy01"
    echo -e "  ${BGreen}axiom-init stok01 --region nyc3 --image axiom-default-123 \\ ${Color_Off}"
    echo -e "    ${BGreen}--size s-1vcpu-2gb --deploy desktop --shell${Color_Off}  # Full init with custom settings"
    echo
}

###########################################################################################################
# Parse command line arguments
#
if [ $# -eq 0 ]; then
    usage
    exit 0
fi
i=0
for arg in "$@"
do
    if [[ "$arg" == "--help" ]] || [[ "$arg" == "-h" ]]; then
	usage
	exit
   fi
    i=$((i+1))
    if [[  ! " ${pass[@]} " =~ " ${i} " ]]; then
        set=false
        if [[ "$arg" == "--debug" ]]; then
            set -xv
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--shell" ]]; then
            shell=true
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--quiet" ]]; then
            quiet=true
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--run" ]]; then
            run=true
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--no-select" ]]; then
            no_select=true
            set=true
            pass+=($i)
        fi
        if [[ "$arg" == "--region" ]] || [[ "$arg" == "-r" ]] ; then
            n=$((i+1))
            region=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--deploy" ]]; then
            n=$((i+1))
            deploy=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--size" ]] ; then
            n=$((i+1))
            size=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--disk" ]] ; then
            n=$((i+1))
            disk=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--image" ]]; then
            n=$((i+1))
            image=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if [[ "$arg" == "--image-id" ]]; then
            n=$((i+1))
            manual_image_id=$(echo ${!n})
            set=true
            pass+=($i)
            pass+=($n)
        fi
        if  [[ "$set" != "true" ]]; then
            space=" "
            if [[ $arg =~ $space ]]; then
              args="$args \"$arg\""
            else
              args="$args $arg"
            fi
        fi
    fi
done

###########################################################################################################
# Generate name
#
if [ -z ${args+x} ]; then
 name="${names[$RANDOM % ${#names[@]}]}$((10 + RANDOM % 20))"
else
 name=$(echo "$args" | tr -d  ' ')
fi

###########################################################################################################
# Get image_id from $image ( default is from axiom.json ) or from user supplied manual image id param
#
if [ "$manual_image_id" != "false" ]
then
    image_id="$manual_image_id"
else
    image_id="$(get_image_id "$image")"
    if [ -z "$image_id" ]; then
        echo -e "${BRed}ERROR: imageid ${Color_Off}[ ${BBlue}$image ${Color_Off}]${BRed} not found in ${Color_Off}[ ${BBlue}~/.axiom/axiom.json ${Color_Off}]${BRed}. you may need to run ${Color_Off}[ ${BBlue}axiom-build --setup ${Color_Off}]${BRed} to build a new image."
        echo -e "${BRed}if you've already built an image, list all images with ${Color_Off}[ ${BBlue}axiom-images ls ${Color_Off}]${BRed} and select it with ${Color_Off}[ ${BBlue}axiom-images select axiom-\$provisioner-\$timestamp ${Color_Off}]"
        echo -e "${BRed}exiting...${Color_Off}"
        exit 1
    fi
fi

###########################################################################################################
# Check if ssh key is specified in axiom.json
#
if [ "$sshkey" == "" ] || [ "$sshkey" == "null" ]; then
echo -e  "${BYellow}WARNING: sshkey not found in ${Color_Off}[ ${BBlue}~/.axiom/axiom.json ${Color_Off}]${BYellow}. adding ${Color_Off}[ ${BBlue}axiom_rsa ${Color_Off}] ${BYellow}key as a backup."
account_path=$(ls -la "$AXIOM_PATH"/axiom.json | rev | cut -d " " -f 1 | rev)
sshkey=axiom_rsa
 if [ -f ~/.ssh/axiom_rsa ] ; then
  jq '.sshkey="'axiom_rsa'"' <"$account_path">"$AXIOM_PATH"/tmp.json ; mv "$AXIOM_PATH"/tmp.json "$account_path"

 else
  ssh-keygen -b 2048 -t rsa -f ~/.ssh/axiom_rsa -q -N ""
  jq '.sshkey="'axiom_rsa'"' <"$account_path">"$AXIOM_PATH"/tmp.json ; mv "$AXIOM_PATH"/tmp.json "$account_path"  >> /dev/null 2>&1
 fi
fi

###########################################################################################################
# Create cloud-init user-data to inject ssh pub key
#
if [ -f ~/.ssh/$sshkey.pub ] ; then
public_key_content=$(cat "$HOME/.ssh/$sshkey.pub")
user_data=$(cat <<EOF
#cloud-config
users:
  - default
  - name: op
    ssh-authorized-keys:
      - $public_key_content
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    shell: /bin/bash
EOF
)
fi

###########################################################################################################
# Function called by trap
#
clean_up() {
    tput setaf 1
    echo ''
    echo -e "${BRed}Exiting..."
    echo -e "${Color_Off}You may need to delete the instance if it was created"
    echo -e "run [ ${BGreen}ax ls ${Color_Off}] to list all instance and [ ${BGreen}ax rm $name ${Color_Off}] to delete it"
    echo "Thank you for using ax :) "
        exit
}

###########################################################################################################
# quiet flag
#
if [ $quiet == "true" ]
then
    trap 'clean_up' SIGINT
    create_instance "$name" "$image_id" "$size" "$region" "$user_data" "$disk" &
    PID="$!"
    waitabit "$PID"
    sleep 20
    ip="$(instance_ip "$name")"
    ssh-keygen -R "[$ip]:2266" >>  /dev/null 2>&1
    >&2 echo -e "${BWhite}Initialized instance '${BGreen}$name${Color_Off}${BWhite}' at '${BGreen}$ip${BWhite}'!${Color_Off}"
else

###########################################################################################################
# Create instance
#
echo -e "${BWhite}Initializing '${BGreen}$name${Color_Off}${BWhite}' at '${BGreen}$region${Color_Off}${BWhite}' with image '${BGreen}$image${Color_Off}${BWhite}'"
# echo deployment profile when needed
if [ "$deploy" != false ]; then
    echo -e "${BWhite}Deploying '${BGreen}$deploy${Color_Off}${BWhite}' after init${Color_Off}"
fi
echo -e "${BWhite}INITIALIZING IN 5 SECONDS, CTRL+C to quit... ${Color_Off}"
sleep 5
mkdir -p "$AXIOM_PATH/tmp/"
trap 'clean_up' SIGINT
create_instance "$name" "$image_id" "$size" "$region" "$user_data" "$disk" &

PID="$!"
"$NOTIFY_CMD" "Axiom Info" "Initializing '$name'..."

secs=$((280))
while [ $secs -gt 0 ]; do
 echo -ne "${BWhite}>> T-Minus $secs to full initialization...${Color_Off}\r"
 sleep 1
 : $((secs--))
done

ip="$(instance_ip "$name")"
ssh-keygen -R "[$ip]:2266" >>  /dev/null 2>&1
>&2 echo -e "${BWhite}Initialized instance '${BGreen}$name${Color_Off}${BWhite}' at '${BGreen}$ip${BWhite}'!"
>&2 echo -e "${BWhite}To connect, run '${BGreen}axiom-ssh $name${Color_Off}'${BWhite}${Color_Off}"
"$NOTIFY_CMD" "Axiom Info" "$name successfully initialized at $ip!"
fi

###########################################################################################################
# no_select flag
#
if [[ "$no_select" != "true" ]]; then
    echo "$name" > "$AXIOM_PATH"/selected.conf
fi

###########################################################################################################
# deploy flag
#
if [ "$deploy" != false ]; then
    "$AXIOM_PATH"/interact/axiom-deploy "$deploy" "$name"
fi

###########################################################################################################
# add axiom-init stats to stats.log
#
echo "{\"init\":\"$name\",\"ip\":\"$ip\",\"time\":\"$starttime\",\"region\":\"$region\",\"size\":\"$size\",\"image\":\"$image\",\"deploy\":\"$deploy\"}"  >> $AXIOM_PATH/stats.log

###########################################################################################################
# connect shell flag
#
if [[ $shell == "true" ]];
then
    axiom-ssh $name  -o StrictHostKeyChecking=no
fi
